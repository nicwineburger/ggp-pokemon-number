{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/fake-captcha.png","components/emvatar.png","components/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","useState","isOpen","setIsOpen","id","Button","color","onClick","style","marginBottom","Collapse","Card","body","className","inverse","backgroundColor","borderColor","CardBody","href","Layout","Container","position","this","children","Component","displayName","name","Home","lastEpisodeTitle","setLastEpisodeTitle","newPokemonNumber","setNewPokemonNumber","lastEpisodeURL","setLastEpisodeURL","lastPokemonNumber","setLastPokemonNumber","lastPokemonURL","setLastPokemonURL","newPokemonURL","setNewPokemonURL","wasLinkClicked","setWasLinkedClicked","wasYesSpoilersClicked","setYesSpoilersClicked","isNotJackson","setIsNotJackson","showJacksonImage","setShowJacksonImage","inputString","setInputString","a","fetch","response","ok","Error","text","rssText","parser","DOMParser","dom","parseFromString","items","querySelectorAll","index","lastTitle","lastURL","textContent","includes","childNodes","regex","lastNumber","parseInt","match","nextNumber","toString","getPokemonURL","newPokeURL","lastPokeURL","smallURL","require","short","err","url","number","pokeAPIURL","pokeResponse","json","pokeJSON","pokeName","bulbapediaURL","getData","class","src","fake","type","onInput","e","target","value","toLowerCase","avatar","App","exact","path","component","Boolean","window","location","hostname","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.73746412.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\r\nimport './NavMenu.css';\r\n\r\nconst NavMenu = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div id=\"text\">\r\n            <Button color=\"secondary\" onClick={toggle} style={{ marginBottom: '10px'}}>About</Button>\r\n            <Collapse isOpen={isOpen}>\r\n                <Card body className=\"text-center\" inverse style={{ backgroundColor: '#3b4cca', borderColor: '#3b4cca', color:'#000000'}}>\r\n                    <CardBody>\r\n                        Created by <a href=\"https://www.twitter.com/baronblissy\">@baronblissy</a>\r\n                        <br/>\r\n                        Please let me know if this breaks!\r\n                    </CardBody>\r\n                </Card>\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavMenu;","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\n\r\nexport class Layout extends Component {\r\n    static displayName = Layout.name;\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content\">\r\n                <Container style={{position: \"center\"}}>\r\n                    {this.props.children}\r\n                <NavMenu />\r\n                </Container>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}","export default __webpack_public_path__ + \"static/media/fake-captcha.95162208.png\";","export default __webpack_public_path__ + \"static/media/emvatar.4ecb2b5f.png\";","import React, { useState } from 'react';\r\nimport './Home.css'\r\nimport fake from './fake-captcha.png';\r\nimport avatar from './emvatar.png';\r\n\r\n\r\n\r\nfunction Home(props) {\r\n    const [lastEpisodeTitle, setLastEpisodeTitle] = useState(\"\");\r\n    const [newPokemonNumber, setNewPokemonNumber] = useState(\"\");\r\n    const [lastEpisodeURL, setLastEpisodeURL] = useState(\"\");\r\n    const [lastPokemonNumber, setLastPokemonNumber] = useState(\"\");\r\n    const [lastPokemonURL, setLastPokemonURL] = useState(\"\");\r\n    const [newPokemonURL, setNewPokemonURL] = useState(\"\");\r\n    const [wasLinkClicked, setWasLinkedClicked] = useState(false);\r\n    const [wasYesSpoilersClicked, setYesSpoilersClicked] = useState(false);\r\n    const [isNotJackson, setIsNotJackson] = useState(true);\r\n    const [showJacksonImage, setShowJacksonImage] = useState(false);\r\n    const [inputString, setInputString] = useState(\"\");\r\n\r\n    async function getData() {\r\n        const abnormalMappingRSS = \"https://arcane-falls-52298.herokuapp.com/https://www.patreon.com/rss/abnormalmapping?auth=XM0dbu5qssC0gFzvwdYVwwXEKiaDmKaz\";\r\n\r\n        let response = await fetch(abnormalMappingRSS);\r\n        if (!response.ok) {\r\n            throw new Error('HTTP Error!');\r\n        }\r\n\r\n        let rssText = await response.text();\r\n        let parser = new DOMParser();\r\n        let dom = parser.parseFromString(rssText, 'application/xml');\r\n        let items = dom.querySelectorAll('item');\r\n\r\n        // Not every episode of Abnormal Mapping is The Great Gundam Project\r\n        // If we don't check then we will try to find a number in a title that doesn't have one and it will break\r\n        let index = 0;\r\n        let lastTitle = \"\";\r\n        let lastURL = \"\";\r\n        while (true) {\r\n            if (!items[index].querySelectorAll('title')[0].textContent.includes('The Great Gundam Project')) {\r\n                index++;\r\n            } else {\r\n                lastTitle = items[index].querySelectorAll('title')[0].textContent;\r\n                lastURL = items[index].childNodes[1].textContent;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const regex = /(\\d+)/gm;\r\n        const lastNumber = parseInt(lastTitle.match(regex)[0]);\r\n        let nextNumber = lastNumber + 1;\r\n\r\n        // Set Episode Titles and URLs\r\n        setLastEpisodeTitle(lastTitle);\r\n        setLastEpisodeURL(lastURL);\r\n\r\n        // Set Pokemon Numbers\r\n        setLastPokemonNumber(lastNumber);\r\n        setNewPokemonNumber(nextNumber.toString());\r\n\r\n        // Setting BulbapediaURLs\r\n        let newPokeURL = await getPokemonURL(newPokemonNumber);\r\n        let lastPokeURL = await getPokemonURL(lastPokemonNumber)\r\n\r\n        let smallURL = require('node-url-shortener');\r\n\r\n        smallURL.short(newPokeURL, function (err, url) {\r\n            setNewPokemonURL(url);\r\n        });\r\n\r\n        smallURL.short(lastPokeURL, function (err, url) {\r\n            setLastPokemonURL(url);\r\n        });\r\n\r\n    }\r\n\r\n    async function getPokemonURL(number) {\r\n\r\n        // Getting Pokemon API to Bulbapedia info\r\n        let pokeAPIURL = \"https://pokeapi.co/api/v2/pokemon/\" + number;\r\n        let pokeResponse = await fetch(pokeAPIURL);\r\n        if (!pokeResponse.ok) {\r\n            throw new Error('HTTP Error!');\r\n        }\r\n\r\n        let pokeJSON = await pokeResponse.json();\r\n        let pokeName = await pokeJSON.name;\r\n        let bulbapediaURL = \"https://bulbapedia.bulbagarden.net/wiki/\" + pokeName + \"_(Pok%C3%A9mon)\";\r\n        return bulbapediaURL;\r\n    }\r\n\r\n    getData();\r\n\r\n    function checkInputText() {\r\n            setIsNotJackson(false);\r\n            setWasLinkedClicked(false);\r\n            setYesSpoilersClicked(false);\r\n    }\r\n\r\n    return (\r\n        <div id=\"text\">\r\n            <p>The next Pok&eacute;mon for The Great Gundam Project is number...</p>\r\n            {wasLinkClicked && (\r\n                <div id=\"warningText\">\r\n                    <div>Spoilers Ahead!</div>\r\n                    <div>Are you sure you want to continue?</div>\r\n                    <a href=\"#\" onClick={() =>\r\n                        setYesSpoilersClicked(true)\r\n                    }>\r\n                        {\"Yes, I am not Jackson, take me to the spoilers.\"}</a>\r\n                    <div>\r\n                        <a href=\"#\" onClick={() => {\r\n                            setWasLinkedClicked(false);\r\n                            setYesSpoilersClicked(false);\r\n                            setShowJacksonImage(true);\r\n                        }\r\n                        }>\r\n                            No, I am Jackson, I don't want spoilers.</a>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {wasYesSpoilersClicked && (\r\n                <div class=\"captcha\">\r\n\r\n                    <img src={fake} />\r\n\r\n                    <input type=\"text\" onInput={(e) => {\r\n                        setInputString(e.target.value);\r\n                        if (inputString.toLowerCase() === \"imnot jackso\") {\r\n                            checkInputText();\r\n                        }\r\n                    }\r\n                    }\r\n                    />\r\n                </div>\r\n                )}\r\n            {!wasLinkClicked && isNotJackson && !showJacksonImage && (\r\n                <div id=\"newNumber\">\r\n                    <a href=\"#\" onClick={() => setWasLinkedClicked(true)}>{newPokemonNumber}</a>\r\n                </div>\r\n            )}\r\n            {!isNotJackson && (\r\n                <div id=\"warningText\">\r\n                    <a href={newPokemonURL}>You are not Jackson, you may proceed.</a>\r\n                </div>\r\n            )}\r\n            {showJacksonImage && (\r\n                <div id=\"warningText\">\r\n                    <p>Jackson go watch the next beach house thing lazy bum</p>\r\n                    <p><img src={avatar} /></p>\r\n                    <a href=\"#\" onClick={() => setShowJacksonImage(false)}>Go Back</a>\r\n                </div>\r\n                \r\n                )}\r\n            <p>The last Pok&eacute;mon was: <em><a href={lastPokemonURL}>{lastPokemonNumber}</a></em></p>\r\n            <p>The last GGP episode was: <em><a href={lastEpisodeURL}>{lastEpisodeTitle}</a></em></p>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Home;","import { Route } from 'react-router-dom';\r\nimport { Component } from 'react';\r\nimport { Layout } from './components/Layout';\r\nimport Home from './components/Home';\r\nimport './custom.css'\r\n\r\n\r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} />\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n    <BrowserRouter basename={baseUrl}>\n        <App />\n    </BrowserRouter>,\n    rootElement);"],"sourceRoot":""}